<?php

App::uses('AppController', 'Controller');

/**
 * Borrowers Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Borrower $Borrower
 * @property PaginatorComponent $Paginator
 */
class BorrowersController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator', 'Uploader');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Borrower->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['nm'])) {
            $conditions[] = array("Borrower.name LIKE '%" . $this->request->data['Src']['nm'] . "%'");
        }
        if (!empty($this->request->data['Src']['df'])) {
            $conditions[] = array("Borrower.created >= '" . $this->request->data['Src']['df'] . "'");
        }
        if (!empty($this->request->data['Src']['dt'])) {
            $conditions[] = array("Borrower.created <= '" . $this->request->data['Src']['dt'] . "'");
        }

        $this->Paginator->settings = array('conditions' => $conditions);
        $this->set('borrowers', $this->Paginator->paginate());
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Borrower->exists($id)) {
            throw new NotFoundException(__('Invalid borrower'));
        }
        $options = array('conditions' => array('Borrower.' . $this->Borrower->primaryKey => $id));
        $this->set('borrower', $this->Borrower->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Borrower->create();
            if ($this->Borrower->save($this->request->data)) {
                $this->Uploader->uploadImage($this->request->data['Borrower']['image'], $this->Borrower->getInsertID(), 'b', 0, 300);
                $this->Flash->success(__('The borrower has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The borrower could not be saved. Please, try again.'));
            }
        }

        $districts = $this->Borrower->District->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('districts'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Borrower->exists($id)) {
            throw new NotFoundException(__('Invalid borrower'));
        }
        if ($this->request->is(array('post', 'put'))) {
            if ($this->Borrower->save($this->request->data)) {
                $this->Uploader->uploadImage($this->request->data['Borrower']['image'], $id, 'b', 0, 300);
                $this->Flash->success(__('The borrower has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The borrower could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Borrower.' . $this->Borrower->primaryKey => $id));
            $this->request->data = $this->Borrower->find('first', $options);
        }
        if (is_file($this->Uploader->uploadDir('b', $id))) {
            $this->set('img', 'b/' . $id . ".png");
        }

        $districts = $this->Borrower->District->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('districts'));
    }

    public function loan_repayment_report() {
        $this->Borrower->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['borrower_id'])) {
            $conditions[] = array("Borrower.id" => $this->request->data['Src']['borrower_id']);
        }

        $this->set('borrowers', $this->Borrower->find('all', array('conditions' => $conditions)));

        $borrowers_list = $this->Borrower->find('list');
        $this->set(compact('borrowers_list'));
    }

    public function individual_report($id = null) {
        $lend_lists = $this->Borrower->Lend->find('all', array('conditions' => array('Lend.borrower_id' => $id)));
        $repayment_lists = $this->Borrower->Repayment->find('all', array('conditions' => array('Repayment.borrower_id' => $id)));
        $this->set(compact('lend_lists', 'repayment_lists'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Borrower->id = $id;
        if (!$this->Borrower->exists()) {
            throw new NotFoundException(__('Invalid borrower'));
        }
        $this->request->allowMethod('post', 'delete');
        if ($this->Borrower->delete()) {
            $this->Flash->success(__('The borrower has been deleted.'));
        } else {
            $this->Flash->error(__('The borrower could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

}
