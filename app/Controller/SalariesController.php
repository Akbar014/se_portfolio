<?php

App::uses('AppController', 'Controller');

/**
 * Salaries Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Salary $Salary
 * @property PaginatorComponent $Paginator
 */
class SalariesController extends AppController
{

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index()
    {
        $this->loadModel('User');
        $this->Salary->recursive = 0;

        $conditions = array();
        if (!empty($this->request->data['Src']['nm'])) {
            $conditions[] = array("Employee.name LIKE '%" . $this->request->data['Src']['nm'] . "%'");
        }

        if (!empty($this->request->data['Src']['df'])) {
            $conditions[] = array("Salary.created >= " => $this->request->data['Src']['df']);
        }
        if (!empty($this->request->data['Src']['dt'])) {
            $conditions[] = array("Salary.created <= " =>  $this->request->data['Src']['dt']);
        }
        $this->Paginator->settings = array('conditions' => $conditions, 'order' => array('Salary.id' => 'DESC'));


        $this->set('salaries', $this->Paginator->paginate());

        $totalSalaries = $this->Salary->find('count', array('conditions' => $conditions));
        $employees = $this->Salary->Employee->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('name' => 'ASC')));
        $roles = $this->User->Role->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('title' => 'ASC')));
        $this->set(compact('totalSalaries', 'employees', 'roles'));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add()
    {
        $this->loadModel('User');
        $date = (!empty($this->request->data['Search']['date'])) ? $this->request->data['Search']['date'] : date("Y-m", strtotime('-1 month'));
        $employees = $this->Salary->Employee->find('all', array('conditions' => array('Employee.status' => E_ERROR), 'recursive' => -1));

        if ($this->request->is('post') && !empty($this->request->data['Salary']['subdate'])) {
            $usrs = array();
            foreach ($employees as $user) {
                $usrs[$user['Employee']['id']] = $user;
            }

            $salaries = $this->Salary->find('all', array('conditions' => array("Salary.sal_month" => $date), 'recursive' => -1));
            foreach ($salaries as $k => $salary) {
                $usrs[$salary['Salary']['employee_id']]['Employee']['balance'] = ($usrs[$salary['Salary']['employee_id']]['Employee']['balance'] - $salary['Salary']['amount']);
                unset($salaries[$k]);
                $salaries[$salary['Salary']['employee_id']] = $salary;
            }

            foreach ($this->request->data['Employee'] as $value) {
                if (isset($salaries[$value['Salary']['employee_id']])) {
                    $value['Salary']['id'] = $salaries[$value['Salary']['employee_id']]['Salary']['id'];
                } else {
                    $this->Salary->create();
                }
                if ($this->Salary->save($value)) {
                    $user = $usrs[$value['Salary']['employee_id']];
                    $user['Employee']['balance'] = ($user['Employee']['balance'] + $value['Salary']['amount']);
                    $this->Salary->Employee->save($user);

                    $this->Flash->success(__('The salary has been saved.'));
                } else {
                    $this->Flash->error(__('The salary could not be saved. Please, try again.'));
                }
            }

            return $this->redirect(array('action' => 'index'));
        }

        $arrm = explode("-", $date);
        $mdays = cal_days_in_month(CAL_GREGORIAN, $arrm[1], $arrm[0]);
        $ptd_data = $ltd_data = array();

        $this->loadModel('Holiday');
        $holidays = $this->Holiday->find('list', array('conditions' => array("DATE_FORMAT(Holiday.hdate,'%Y-%m')" => $date), 'fields' => array('Holiday.hdate', 'Holiday.title')));
        $attendances = $this->Salary->Employee->Attendance->find('all', array('conditions' => array("DATE_FORMAT(Attendance.a_date,'%Y-%m')" => $date), 'recursive' => -1));
        foreach ($attendances as $row) {
            $ptd_data[$row['Attendance']['employee_id']][$row['Attendance']['a_date']] = array($row['Attendance']['in_time'], $row['Attendance']['out_time']);
        }
        $leaves = $this->Salary->Employee->Forsake->find('all', array('conditions' => array("DATE_FORMAT(Forsake.startDate,'%Y-%m')>='" . $date . "'", "DATE_FORMAT(Forsake.endDate,'%Y-%m')<='" . $date . "'"), 'recursive' => -1));
        foreach ($leaves as $row) {
            for ($day = 0; $day < (int)$row['Forsake']['days']; $day++) {
                $dt = date('Y-m-d', strtotime('+' . $day . ' days', strtotime($row['Forsake']['startDate'])));
                $ltd_data[$row['Forsake']['user_id']][$dt] = $row['Forsake']['forsake_type'];
            }
        }

        $roles = $this->User->Role->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('title' => 'ASC')));
        $this->set(compact('employees', 'roles', 'date', 'holidays', 'mdays', 'ptd_data', 'ltd_data'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null)
    {
        $this->Salary->id = $id;
        if (!$this->Salary->exists()) {
            throw new NotFoundException(__('Invalid salary'));
        }

        $salary = $this->Salary->find('first', array('conditions' => array("Salary.id" => $id)));
        $secs = time() - strtotime($salary['Salary']['created']);
        if (($secs / 86400) < 3) {
            if ($this->Salary->delete()) {
                $salary['Employee']['balance'] = ($salary['Employee']['balance'] - $salary['Salary']['amount']);
                $this->Salary->Employee->save($salary);

                $this->Flash->success(__('The salary has been deleted.'));
            } else {
                $this->Flash->error(__('The salary could not be deleted. Please, try again.'));
            }
        } else {
            $this->Flash->error(__('The salary delete permission is over.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

}
