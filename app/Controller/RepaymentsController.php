<?php

App::uses('AppController', 'Controller');

/**
 * Repayments Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Repayment $Repayment
 * @property PaginatorComponent $Paginator
 */
class RepaymentsController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Repayment->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['nm'])) {
            $conditions[] = array("Borrower.name LIKE '%" . $this->request->data['Src']['nm'] . "%'");
        }
        if (!empty($this->request->data['Src']['df'])) {
            $conditions[] = array("Repayment.created >= '" . $this->request->data['Src']['df'] . "'");
        }
        if (!empty($this->request->data['Src']['dt'])) {
            $conditions[] = array("Repayment.created <= '" . $this->request->data['Src']['dt'] . "'");
        }

        $this->Paginator->settings = array('conditions' => $conditions);
        $this->set('repayments', $this->Paginator->paginate());
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Repayment->exists($id)) {
            throw new NotFoundException(__('Invalid repayment'));
        }
        $options = array('conditions' => array('Repayment.' . $this->Repayment->primaryKey => $id));
        $this->set('repayment', $this->Repayment->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Repayment->create();
            $bordatas = $this->Repayment->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' => $this->request->data['Repayment']['borrower_id'])));
            if ($this->Repayment->save($this->request->data)) {
                $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
                $bdata['Borrower']['paid'] = $bordatas['Borrower']['paid'] + $this->request->data['Repayment']['pay_amount'];
                $this->Repayment->Borrower->save($bdata);
                $this->Flash->success(__('The repayment has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The repayment could not be saved. Please, try again.'));
            }
        }
        $borrowers = $this->Repayment->Borrower->find('list');
        $this->set(compact('borrowers'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Repayment->exists($id)) {
            throw new NotFoundException(__('Invalid repayment'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $rpaydata = $this->Repayment->find('first', array('recursive' => -1, 'conditions' => array('Repayment.id' => $id)));
            $bordatas = $this->Repayment->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' => $this->request->data['Repayment']['borrower_id'])));
            if ($this->Repayment->save($this->request->data)) {
                $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
                $bdata['Borrower']['paid'] = $bordatas['Borrower']['paid'] - $rpaydata['Repayment']['pay_amount'] + $this->request->data['Repayment']['pay_amount'];
                $this->Repayment->Borrower->save($bdata);
                $this->Flash->success(__('The repayment has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The repayment could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Repayment.' . $this->Repayment->primaryKey => $id));
            $this->request->data = $this->Repayment->find('first', $options);
        }
        $borrowers = $this->Repayment->Borrower->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('borrowers'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Repayment->id = $id;
        if (!$this->Repayment->exists()) {
            throw new NotFoundException(__('Invalid repayment'));
        }
        $rpaydata = $this->Repayment->find('first', array('recursive' => -1, 'conditions' => array('Repayment.id' => $id)));
        $bordatas = $this->Repayment->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' => $rpaydata['Repayment']['borrower_id'])));
        $this->request->allowMethod('post', 'delete');
        if ($this->Repayment->delete()) {
            $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
            $bdata['Borrower']['paid'] = $bordatas['Borrower']['paid'] - $rpaydata['Repayment']['pay_amount'];
            $this->Repayment->Borrower->save($bdata);
            $this->Flash->success(__('The repayment has been deleted.'));
        } else {
            $this->Flash->error(__('The repayment could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

}
