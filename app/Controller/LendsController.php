<?php

App::uses('AppController', 'Controller');

/**
 * Lends Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Lend $Lend
 * @property PaginatorComponent $Paginator
 */
class LendsController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Lend->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['nm'])) {
            $conditions[] = array("Borrower.name LIKE '%" . $this->request->data['Src']['nm'] . "%'");
        }
        if (!empty($this->request->data['Src']['df'])) {
            $conditions[] = array("Lend.created >= '" . $this->request->data['Src']['df'] . "'");
        }
        if (!empty($this->request->data['Src']['dt'])) {
            $conditions[] = array("Lend.created <= '" . $this->request->data['Src']['dt'] . "'");
        }

        $this->Paginator->settings = array('conditions' => $conditions);
        $this->set('lends', $this->Paginator->paginate());
    }

    /**
     * view method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function view($id = null) {
        if (!$this->Lend->exists($id)) {
            throw new NotFoundException(__('Invalid lend'));
        }
        $options = array('conditions' => array('Lend.' . $this->Lend->primaryKey => $id));
        $this->set('lend', $this->Lend->find('first', $options));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
           
            $bordatas = $this->Lend->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' =>$this->request->data['Lend']['borrower_id'])));
            
            $this->Lend->create();
            if ($this->Lend->save($this->request->data)) {
                $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
                $bdata['Borrower']['amount'] = $bordatas['Borrower']['amount'] + $this->request->data['Lend']['amount'];
                $this->Lend->Borrower->save($bdata);

                $this->Flash->success(__('The lend has been saved.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The lend could not be saved. Please, try again.'));
            }
        }
        $borrowers = $this->Lend->Borrower->find('list');
        $this->set(compact('borrowers'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Lend->exists($id)) {
            throw new NotFoundException(__('Invalid lend'));
        }
        if ($this->request->is(array('post', 'put'))) {
            $lenddata = $this->Lend->find('first', array('recursive' => -1, 'conditions' => array('Lend.id' => $id)));
            $bordatas = $this->Lend->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' => $this->request->data['Lend']['borrower_id'])));
            if ($this->Lend->save($this->request->data)) {
                $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
                $bdata['Borrower']['amount'] = $bordatas['Borrower']['amount'] - $lenddata['Lend']['amount'] + $this->request->data['Lend']['amount'];
                $this->Lend->Borrower->save($bdata);
                $this->Flash->success(__('The lend has been updated.'));
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error(__('The lend could not be updated. Please, try again.'));
            }
        } else {
            $options = array('conditions' => array('Lend.' . $this->Lend->primaryKey => $id));
            $this->request->data = $this->Lend->find('first', $options);
        }
        $borrowers = $this->Lend->Borrower->find('list', array('conditions' => array('status' => E_ERROR)));
        $this->set(compact('borrowers'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Lend->id = $id;
        if (!$this->Lend->exists()) {
            throw new NotFoundException(__('Invalid lend'));
        }
        $lenddata = $this->Lend->find('first', array('recursive' => -1, 'conditions' => array('Lend.id' => $id)));
        $bordatas = $this->Lend->Borrower->find('first', array('recursive' => -1, 'conditions'=>array('Borrower.id' => $lenddata['Lend']['borrower_id'])));
        $this->request->allowMethod('post', 'delete');
        if ($this->Lend->delete()) {
            $bdata['Borrower']['id'] = $bordatas['Borrower']['id'];
            $bdata['Borrower']['amount'] = $bordatas['Borrower']['amount'] - $lenddata['Lend']['amount'];
            $this->Lend->Borrower->save($bdata);
            $this->Flash->success(__('The lend has been deleted.'));
        } else {
            $this->Flash->error(__('The lend could not be deleted. Please, try again.'));
        }
        return $this->redirect(array('action' => 'index'));
    }

}
